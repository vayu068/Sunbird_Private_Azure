# ------------------------------------------------------------------------------------------------------------ #
# Mandatorty variables - DO NOT LEAVE ANYTHING BLANK #
core_vault_sunbird_encryption_key: "12345"       # Random string to encrypt data
core_vault_postgres_password: "Admin@8080"           # Update same password in dp secrets dp_vault_pgdb_admin_password  variable
core_vault_dp_pgdb_password: "Admin@8080"       #update same password in dp secrets dp_vault_pgdb_password  variable       
core_vault_sunbird_azure_storage_key: "o7g+ko5PQEg8Z1qWpsTnP6vLRYSy6x6fHX0WDeW0bhDcoAzjkD2ZMw5CZHQQxSP9xUDUzy+zB53N+AStUfzIqg=="
core_vault_docker_registry_url: "https://index.docker.io/v1"      # for docker hub "https://index.docker.io/v1"
core_vault_docker_registry_user: "vayu068" 
core_vault_docker_registry_password: "Bel@12345"
learning_content_drive_apiKey: "AIzaSyAkLoukJMfRIrsZkqJxlFKl68RfPBF-yQQ"
uci_encryption_key_base64: "cmFuZG9tc3RyaW5nCg=="

# Run the below command in shell
# date +'%Y-%m-%dT%H:%m:%SZ' -d '+1 year'
# sas_token=?`az storage account generate-sas --account-name "{{ azure_plugin_storage_account_name }}" --account-key "{{ azure_plugin_storage_account_key }}" --expiry $sas_expire_time --https-only --permissions acdlpruw --resource-types sco --services bfqt | xargs`
# generate a sas for the blob for entire storage accout with write and read access
artifact_azure_account_sas: "?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiyx&se=2023-10-31T20:07:01Z&st=2022-08-29T12:07:01Z&spr=https&sig=tforoFC6YbuOVFPF9v0kBtK7UyDbndXOivGUdWm325s%3D"                                  # SAS token value generated from above command
sunbird_artifact_storage_account_sas: "?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiyx&se=2023-10-31T20:07:01Z&st=2022-08-29T12:07:01Z&spr=https&sig=tforoFC6YbuOVFPF9v0kBtK7UyDbndXOivGUdWm325s%3D"                        # SAS token value generated from above command
sunbird_public_storage_account_sas: "?sv=2021-06-08&ss=bfqt&srt=sco&sp=rwdlacupiyx&se=2023-10-31T20:07:01Z&st=2022-08-29T12:07:01Z&spr=https&sig=tforoFC6YbuOVFPF9v0kBtK7UyDbndXOivGUdWm325s%3D"                          # SAS token value generated from above command
sunbird_public_storage_account_key: "co7g+ko5PQEg8Z1qWpsTnP6vLRYSy6x6fHX0WDeW0bhDcoAzjkD2ZMw5CZHQQxSP9xUDUzy+zB53N+AStUfzIqg=="
sunbird_private_storage_account_key: "o7g+ko5PQEg8Z1qWpsTnP6vLRYSy6x6fHX0WDeW0bhDcoAzjkD2ZMw5CZHQQxSP9xUDUzy+zB53N+AStUfzIqg=="

# The proxy key and crt values should be padded to the right by a couple of spaces 
# Example:
# core_vault_proxy_site_key: |+
#    -----BEGIN PRIVATE KEY-----
#    MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDFrWgCrQPHcZ2I
#    UqvtIOY5lxlgU22+4BQbjMRN6NZn89AfWMUpRQOCoohPpTs0/JF+a20RI256gNkr
#    yxm5BleKMv9dovAUjPElrdsWsBq9XOFDzN7GJnWpyB7oFYOoqrbRNrvL/dTP/op/
#    -----END PRIVATE KEY-----
core_vault_proxy_site_key: |+
  -----BEGIN PRIVATE KEY-----
  MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC4HNgcutBvGR1y
  AGCMvNgf7X0lrBIRn/0BYhOoadxNbroy05aaSjVplYumJD9oHIkkdZ4wIMJs5v5j
  Bp6DrMUZEm0ELiigcii0ZPey9s5wedI0UOJ/e4JjxElHPH88xGambnklId0upEoF
  pxiHemjs1l9/JQou9R4X97KeGHqwdQkCvDchIiGtxGOpdx8pnD2e1Wd14E8TxtI3
  2P6puT6nx3iLJ18lOzKk91gv4dNIjRigwB7BgbBcy4ogXa2rFq9jmQuUsINLwsKi
  EM8y7j/M/UW7VJItDup3g3mBPudMKFoQ5H3iVeGckPsN8fTt6Vkv1R8VWZVe4FyI
  AAVKAL+FAgMBAAECggEAEAQKVK13lkKECje4LmX7EwPwwAcw5zGYq7chaKQU0vOP
  5P38+tz7unyU0lYS4fahg3dr1Fn1L84EUQ7xWRj9aEnvC88MH7Duk4q49Wt819Hx
  FDX5DgfrdsxLZ5P+qYWYPGAdz7obaIRIICfB/X8Lg5a+ZewN77nI7WLRuej9Oz49
  JtK80s9FxMp15z+qJG79dpLvDerfQ+cVZdlHQmInk99tfJ8iGQsIXMZE+1HgHfaZ
  eN4o/+63wCFWhND6x7/1S+jro3R2MlR5YvIIpi0NHn4UpK0pWXJG35PLaD2SlDNF
  fgO1S9Wq9pyf1sEho6Xfoay2cPE25nJa2CpGKUVvXQKBgQDth5cuXT5QhRqvyMQQ
  vSPrGBtSRSMw7VA1Jb5mRrmfeBFkvuoKRTeIScvPSHOwSz+/9GUJNk6pNLg3NcZx
  +madLFeb3Kau/yDslzuSHPauZaSi1lIRIa7pD3vHys6SfPUeQPkJ0XQqlGxMBLqv
  s4pUMzZEDbPqNu/7Sn7kgJHvVwKBgQDGbecgfruaA21GafJan0A9zM4Jeh2nbuDj
  h10jhAeSV60JED3tisenq6fAVaHNUbCzRPUcuWssNaH0vrJfoDg4Hv9bfrxihVx4
  tk3TPJkqadoW8D6hQizYU0yUB339hoGyCFsG4QPlc03AQyTXiVXBsgTUCk/dA96K
  K3KQfAkqgwKBgQDnAmncI79JHEq6D23wQaM/L7DSsH7rRMIvDkhAvCQnneR8sNh5
  qJu7ptna/MHXATg8/fmNng2errFCsMARddB6p/eElHJf260vrF25WwXm0t/tprcm
  BjZQYEioJOwGuBTEmbga/mQWTUeOH0NZQioUfcIXKaSC828uXGNQ5GIJ/QKBgHz6
  r/65k/O3gNY+2NTXRSEnpAY4EgFpRuBIXBOIjzRPYL86qaa6KHKlHW15AgZOE5t2
  LWRALQ6VYULD8ZllUsOWUoQQWRs8oDevq2kG2/no3eJgwzHSemhuXudFqMdMNtgp
  hxvYEhos+6XDJKtU5tyvAXeEXzT3wO0J3IjAdw19AoGAfXgi1dVprLCqQ0TYHcrk
  BNWdKHL15aYO0Or8IgLndiuH5yOwncUWXbPnUdqNKDBb3u5iMDGW3wLF24hNmWot
  NXDp/R7olU47aOrD5JwW1oCgNUpu2U3QwdR8f8yD2eTtU3S9ErwtLJfcIORkENR2
  ISxz85jFAlwEhMpZuNzca4Y=
  -----END PRIVATE KEY-----

core_vault_proxy_site_crt: |+
  -----BEGIN CERTIFICATE-----
  MIIEDzCCAvegAwIBAgIUQyrf1MPqJyx8/S/aUnznWVwJKDIwDQYJKoZIhvcNAQEL
  BQAwgZYxCzAJBgNVBAYTAklOMQswCQYDVQQIDAJVUDEOMAwGA1UEBwwFRGVsaGkx
  EDAOBgNVBAoMB1N1bmJpcmQxDDAKBgNVBAsMA0RldjEoMCYGA1UEAwwfCXN1bmJp
  cmQuY21zLmNsb3VkZXZhbmdlbGlzdC5pbjEgMB4GCSqGSIb3DQEJARYRdmF5dTA2
  OEBnbWFpbC5jb20wHhcNMjIwOTAyMTEzMDQxWhcNMjMwOTAyMTEzMDQxWjCBljEL
  MAkGA1UEBhMCSU4xCzAJBgNVBAgMAlVQMQ4wDAYDVQQHDAVEZWxoaTEQMA4GA1UE
  CgwHU3VuYmlyZDEMMAoGA1UECwwDRGV2MSgwJgYDVQQDDB8Jc3VuYmlyZC5jbXMu
  Y2xvdWRldmFuZ2VsaXN0LmluMSAwHgYJKoZIhvcNAQkBFhF2YXl1MDY4QGdtYWls
  LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALgc2By60G8ZHXIA
  YIy82B/tfSWsEhGf/QFiE6hp3E1uujLTlppKNWmVi6YkP2gciSR1njAgwmzm/mMG
  noOsxRkSbQQuKKByKLRk97L2znB50jRQ4n97gmPESUc8fzzEZqZueSUh3S6kSgWn
  GId6aOzWX38lCi71Hhf3sp4YerB1CQK8NyEiIa3EY6l3HymcPZ7VZ3XgTxPG0jfY
  /qm5PqfHeIsnXyU7MqT3WC/h00iNGKDAHsGBsFzLiiBdrasWr2OZC5Swg0vCwqIQ
  zzLuP8z9RbtUki0O6neDeYE+50woWhDkfeJV4ZyQ+w3x9O3pWS/VHxVZlV7gXIgA
  BUoAv4UCAwEAAaNTMFEwHQYDVR0OBBYEFNNXt3ur5JbodUvk9osItSItDMwkMB8G
  A1UdIwQYMBaAFNNXt3ur5JbodUvk9osItSItDMwkMA8GA1UdEwEB/wQFMAMBAf8w
  DQYJKoZIhvcNAQELBQADggEBAAqKY7x4k6k+qdKrOv5+n9/NPAWeCdUkQdiVe1De
  1G+xV2vZ52ch7eXRFFqOaWFXBRPk+Vp/EfneU5CY9P6Y28h1ox2KwVxoCfkaVj2U
  /GUfwcPK79OkzrogjcAZmWarDGAJ23QMmhgn++wW3mhmkMuoR59hmLfvMjwiGRZ6
  VxSsO+dPNR9yJIidONjrOH/RspT7vPmdc9gIgs2g+qQ/m0b71Qdxnc2VFHbu1G0U
  GUszbpSFRwXM/ouDzP4tdazdxBixcws+qz7pinNLNlYS3jtthD0rGzksB3EzM1pA
  oc0sMZuxpCxUwygQzpckbamM0UfaX39M97TXQczIpvuZPvk=
  -----END CERTIFICATE-----

core_vault_sunbird_api_auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJOREpsVUpqM25QNDJwYWxoOTJLTW5tNm9qbWQ1UnNJZCJ9.pPRAevYX2Miuhagi6NQws7IvQZmXAEJwaR6pEfwhhrE" # Take the jwt token of api-admin consumer from Jenkins job console output after running OnboardConsumers - Use the same value in DP secrets.yml also for the variable sunbird_api_auth_token

# Keycloak client secret uuids
# You can generate unique ids using the below command
# sudo apt install uuid-runtime
# uuidgen
sunbird_trampoline_android_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"               # Keycloak trampoline-android client secret
sunbird_trampoline_desktop_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"               # Keycloak trampoline-desktop client secret
core_vault_sunbird_google_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                # Keycloak google-auth client secret
core_vault_nodebb_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                                 # Keycloak nodebb client secret
core_vault_android_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                       # Keycloak android client secret
core_vault_desktop_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                                # Keycloak desktop client secret
sunbird_google_android_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                   # Keycloak google auth android client secret
sunbird_google_desktop_keycloak_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                   # Keycloak google auth desktop client secret
core_vault_sunbird_sso_client_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                     # Keycloak lms client secret
core_vault_sunbird_trampoline_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                     # Keycloak trampoline client secret
core_vault_sunbird_keycloak_user_federation_provider_id: "dded528c-e4eb-422c-98f9-5299ddebf777"  # Keycloak cassandra federation id
core_vault_android_secret: "dded528c-e4eb-422c-98f9-5299ddebf777"                                # Keycloak android client secret

core_vault_sunbird_sso_publickey: "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDFlfNGkmIBrms1yE4T86B3f0AIEYxunokP+uygeLx6pJgU4zK04bHUvap0TlV1lu6XgqrF8x1ghLu74Ei5L7xcedvYofo7vxbhHyMX3TIaNLoWb4MJKEOBazs1W0g8k1JxEMUWt7iA14s4IrICSn2R/Bbchmq/uhOoZl9D8RXTfSxmyS9uq97Zs0P/EeGdxouv46VfV5WQnqlINz/nz74Mp5nCum1t4fJcWO0Ym1M7urLybWCY+1tFr49PNILKQp7JUCo2jyZ26MIGbWWOdKXhMrojbP+UZgn85wHgo0M2Zht/rGDwvOYkZzKLhw0QbrL8169yMNSVQk4IV6G5y0QIDAQAB"# Public key of keycloak sunbird realm, update this post keycloak deployment.  See below for steps
# SSH tunnel to the keycloak VM by running ssh -L 8080:<keycloak machine ip>:8080 deployer@Keycloak-VM-IP
# If you cannot tunnel directly to Keycloak VM, then tunnel to Jenkins first and then tunnel to Keycloak VM from jenkins
# 
# Go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/clients -> lms -> service account roles -> Click on client roles drop down -> Select realm-management -> Select manage-users in Available Roles -> Click on Add selected
# 
# Go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/keys
# Click on Public Key and update the variable
#
# Go to http://localhost:8080/auth/admin/master/console/#/realms/master/login-settings and set the Require SSL to external requests

adminutil_refresh_token_public_key_kid: "03xEtGm9xJJMtSURkD-1Tj6vkbbbTPBVpJNUcZLw1sg"   # get after keycloak deployment, go to http://localhost:8080/auth/admin/master/console/#/realms/sunbird/keys and use the Kid of the RS256 token

#SELECT value FROM component_config CC INNER JOIN component C ON(CC.component_id = C.id) WHERE C.realm_id = 'sunbird' and provider_id = 'hmac-generated' AND CC.name = 'secret';
adminutil_refresh_token_secret_key: "paZkM9cL5BOZ1MbYGXFIO6Kzon21Gl7y7rgStv4BIe-6oqbSY2LFOwRWekMAi6CE85pT29qhhsbkWywcC1s-5A"  # get after Keycloak deployment from postgres using the above query


# mongodb keyfile content generated using
# 'openssl rand -base64 741'
# eg:
# mongodb_keyfile_content: |
#   dzKXABmKNvuhvsbQud1jn84BMrRJdJb92TQbDV+HVAQXt1ATBssnTIJp6DtL1c/H
#   GHjoOQBuDv1MfymFWxE10dXBlx1IG/pQDeTtC+AOrgyYvIQZNfxHIEfyLao14ZLT
#   8sV6GAlQQzJFSHGqg174iniZpiibuj8Q7zqGlJgu/4MwcOBSflTlcCbYjkBErBff
#   +XBi7hNNcPfIizB6XuYwsY59XCLH/g2S3g9aitbunyCAAQUpyFfnOvMezliFlDDh
#   surRP/lpZ1ZzHtLni2Og8dbOj4J7TLauESd/8Bq+jLzhtBpVn0HoxxF5Se/++z+I
#   ZfK4fSR2y2uyBSbQJmGZYnlRi4iTN/LGpSg2iZVzOQhUUBvBgYdWSkkYLbl2xTni
#   d+BbwGnuvSs1gPXaokKqS6IF9zUGK9V2aW0a9qRHGjv3fJXQqB7zRvc1ciJjUwpI
#   ISsbvlxmZLeDvnQJB3evf/7itSLqNwxMDybn28Ig0E5xBqGCcFbjNjvkkyZPf3YX
#   +nI/gkSLYCPTFsnFaJSBrRxMn6c4iOwU1zc7GAg9KUuqF/ttLv8SZuooRsEZQsif
#   zrxXgUHoqkx0WDZiwz91D3VD4hjwSWa3TLEFy8R9ZeSLv0sDihKlPYvW9HlQuUV8
#   O//HoEA0ajQxjRvJdTskYK6nESOrr+geM477D5Dp3ZKl01ak0HHseJGcoHoMdZOW
#   dcvAhtKZogLstrT1+qftJcsTAOMWsF4EkpoyPelutEyLrLjfzzSUKlb06x2lKxBt
#   NoOUHRhhEXe42QMSMYgtT8wE+/LfeB5IMOP1CiC1dGxBjZkZTtSYTSbcB+52H4xi
#   LhTTEp59/yS6InuJUB6ZzgLGhJoCVg8ZSgSbnngy6Yc4lJpRONlzP7l6A/ins0aA
#   6PvGBWyEAP+P+6xNVpDkrUPKVIFZDfMMCLVm1sicOgtEBInEpeqhiOygnpO5u12P
#   IeDCClMkUbhtwTpgVszUe4OA2EXo
mongodb_keyfile_content: |

# Steps to generating the Nodebb auth token
# 1. Login to Nodebb (https://<domain-name>/discussions/login) as a Admin.
# 2. Go to admin panel and click on Plugin -> Install Plugins
# 3. Go to Installed Pluging, Activate All Plugins. Click on Dashboard and Click Rebuild and Restart
# 4. Again vist Admin Panel post restart -> Click on Plugins => Write API
# 5. Under MASTER TOKENS section, click on create token button, It will generate a token.
discussionsmw_nodebb_authorization_token:    # Read the comment above to generate this key
core_vault_mail_server_password: ""                      # Email server password

# Oauth keys
core_vault_sunbird_google_oauth_clientId_portal: "812585265146-05kihuep69gmq3p5qv369j5i0hqkb5ah.apps.googleusercontent.com"        # Google oauth client id
core_vault_sunbird_google_oauth_clientSecret_portal: "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"    # Google oauth client secret
core_vault_sunbird_google_captcha_site_key_portal: "6LeKV3UhAAAAAEo4saOlcGwFFGocwAPUxBIfY5DL"       # Google recaptch site key
google_captcha_private_key: "6LeKV3UhAAAAADd4em1LcMrrfIBdGfnRrm2brvT8"                              # Google recaptch private key

# ------------------------------------------------------------------------------------------------------------ #
# Optional variables - Can be left blank if you dont plan to use the intended features
core_vault_monitor_alerts_slack_url: ""                  # Slack webhook for alerts from alertmanager
core_vault_msg_91_auth_key:                              # API key for sending OTP SMS

# Oauth for logger kibana
core_vault_kibana_google_client_id:                      # You can use the same outh client id that we used for portal
core_vault_kibana_google_client_secret:                  # You can use the same outh client secret that we used for portal

vault_core_url_shortner_access_token: ""                 # Url shortner access token if you want to shorten urls like forgot password link etc using an external service like bit.ly

### IMPORTANT! ###
### NOTE: FOR A REAL ENVIRONMENT YOU MUST CHANGE THE BELOW VALUES TO SOMETHING VERY SECRET WHICH ONLY YOU WILL KNOW! DO NOT USE THE DEFAULTS FOR REAL ENVIRONMENTS! ###
# ------------------------------------------------------------------------------------------------------------ #
# Sensible defaults which you need not change if you are just trying Sunbird - You should change these to something unique for real environments and not use the defaults

core_vault_keycloak_api_management_user_password: admin
core_vault_keystore_password: password                                                           # Password for encrypting data in cassandra
core_vault_sunbird_sso_username: admin                                                           # Keycloak SSO username
core_vault_sunbird_sso_password: admin                                                           # Keycloak SSO password
core_vault_keycloak_password: admin                                                              # Keycloak admin password
core_vault_grafana_admin_password: sunbird                                                       # Grafana admin password
core_vault_truststore_password: sunbird                                                          # Password for cassandra trust store
core_vault_proxy_prometheus_admin_creds: admin                                                   # Prometheus admin password
core_vault_postgres_username: postgres                                                           # Postgres user name
core_vault_grafana_editor_password: sunbird                                                      # Grafana editor user password

# ------------------------------------------------------------------------------------------------------------ #
# Sensible defaults which you need not change - But if you would like to change, you are free to do so

core_vault_grafana_dashboards_git_repo_url_with_credentails: "https://github.com/project-sunbird/grafana-dashboards.git"
# Changing the sessions secret value will invalidate all existing sessions.
# In order to rotate the secret without invalidating sessions, provide an array of secrets,
# with the new secret as first element of the array, and followed by previous secrets.
sunbird_portal_session_secret: "long-secret-to-calm-entropy-gods"    # Portal session secret
nodebb_admin_password: MySecretPassword                              # Nodebb admin password
core_vault_enc_entry_password: password                              # encryption password for the enc service
core_vault_enc_master_pass: password                                 # encryption password for the keys
core_vault_kibana_cookie_secret: long-secret-to-calm-entropy-gods    # Cookie secret for kibana Oauth
dp_play_http_secret_key: "long-secret-to-calm-entropy-gods"          # Random 32+ character string
core_vault_graph_passport_key: "long-secret-to-calm-entropy-gods"    # Should be same as lp_vault_graph_passport_key from KP secrets.yml
crypto_encryption_key: "long-secret-to-calm-entropy-gods" # any crypto key of 32 bit length, used by portal to encrypt and decrypt the userDetails for forgot password flow
sunbird_api_auth_token_bot: "{{ core_vault_sunbird_api_auth_token }}"

# Adding an secrets related to ML-services
# Azure token
ml_analytics_azure_sas_token: Azuretoken
# Druid project injestion data-source-spec
ml_analytics_druid_project_injestion_spec: DruidProjectIngestionSpec 
ml_analytics_druid_observation_status_injestion_spec: DruidObeservationStatusIngestionSpec
# Jwt token of ML API
ml_analytics_api_access_token: ApiAccessToken
# ML authorization key
ml_analytics_api_authorization_key: ApiAuthorizationKey
